from opensees import *
from termcolor import cprint
import matplotlib.pyplot as plt
import numpy as np
import timeit

start_time = timeit.default_timer()
#--------------------------------------------------------------------------------------------------------------------#
wipe()
model('Basic','-ndm',2,'-ndf',3)

# Define Nodes (10 DOF)
height = 3000.
mas = [1., 0., 0.]
for i in range(1,12):
    node(i, 0., height*(i-1),'-mass', *mas)
# Define Constatint
fix(1, 1,1,1)
for i in range(2,12):
    fix(i, 0, 1, 1)
# Define Material
# Defien Element
eleArgs = [1., 1., 1., 1]
geomTransf('Linear', 1)
for i in range(1, 11):
    element('elasticBeamColumn', i, i, i+1, *eleArgs)


# Define Parttern
gmotion = np.loadtxt('motionMDF.csv') # Array 로 불러옴
gmlist=gmotion.tolist() # tolsit() 를 이용해서 List 로 바꿈
value = gmlist # Value list 에 gmotion 삽입
timeSeries('Series', 1, '-dt', 0.01, '-values', *value)  # Values에 s 넣는 것을 자꾸 잊어버림. 리스트는 apostrophe 로 넣을 것
pattern('UniformExcitation', 1, 1, '-accel', 1) #psTag dir accel tsTag  #UniformExcitation = Relative Response
# Define Analysis
wipeAnalysis()                  #이전의 해석설정을 초기화 시킨다.
system('BandGeneral')
constraints('Plain')
algorithm("Newton")
numberer('RCM')
integrator("Newmark", 0.5, 0.25)  #gmmma beta
analysis("Transient")
# Execute Analysis
time, disp, accel, force = ([] for i in range(4)) # Declare multiple empty lists on one line.
Node = 11
DOF = 1
Ele = 10
for i in range(1,7201):
    analyze(1, 0.01) # Step, TimeStep
    time += [getTime()]                   # 모든 결과 함수는, 값을 그대로 반환하기 때문에 리스트안에 넣줘야함.
    disp += [nodeDisp(Node,DOF)]         
    accel += [nodeAccel(Node,DOF)]
    force += [eleForce(Ele, DOF)]
    cprint(str(i)+' th iteration calculating...','red')
cprint("Analysis Completed",'blue')
#--------------------------------------------------------------------------------------------------------------------#
elapsed_time = timeit.default_timer() - start_time
# Plotting
plt.subplot(2,2,1)
plt.plot(time, disp)
plt.xlabel('time')
plt.ylabel('disp')
plt.subplot(2,2,2)
plt.plot(time, accel)
plt.xlabel('time')
plt.ylabel('accel')
plt.subplot(2,2,3)
plt.plot(time, force)
plt.xlabel('time')
plt.ylabel('force')
plt.subplot(2,2,4)
plt.plot(disp, force)
plt.tight_layout()
plt.show()
