# To model spring elements, twoNodeLink Element and Elastic Material were used. 
# Eigenvalues of the model were almost identical to the examples model in the book.
 

#####################################################################
## OpenSees Python 10 DOF Elastic Earthquake Response Analysis #####
## 2018 April Osaka University DONGHA KIM                      #####
## Fixed Base Model Y-DIR of the Building Model                #####
#####################################################################
# Unit
# Mass = ton
# Force = Newton
# Length = mm
# Time = second

import opensees as ops
import numpy as np
import matplotlib.pyplot as plt
import timeit
from termcolor import cprint
import math

start_time = timeit.default_timer()
cprint("OpenSEES Analysis has Strated",'red')
#------------------------ Model Building started ---------------------------#
cprint("Stage 1 : Model Builder Initiated",'blue')
# Model Dimension
ops.wipe()
ops.model('Basic','-ndm',2,'-ndf',3)

# Define Nodes
height=3010. #mm
Nnode=10 # 10 DOF Model
for i in range(1,Nnode+1):
    ops.node(i,0.,height*(i-1))

# Define Nodal Mass
FloorMass = [759.,677.,677.,677.,677.,
             674.,659.,551.,551.,494.] # Unit = t
for i in range(2,Nnode+1):
    ops.mass(i, FloorMass[i-1], FloorMass[i-1], FloorMass[i-1]) # Mass direction: allowable direction of vibrations e.g. you may exclude vertical;
                                                                # vibrations (of floors) while analysis a multi-story building with rigid floor systems or
                                                                # horizontal ones for a single slab (footfall analysis).

# Define Constraints
ops.fix(1,1,1,1)
for i in range(2,Nnode+1):
    ops.fix(i,0, 0, 1)

# Define Elements
ops.geomTransf('Linear',1)
EY = [17198., 16893., 14054.,11774., 9813., 7909., 5268., 3936., 2841.] # Unit : kN
EX = [1e8] #Unit : kN
for i in range(1,Nnode):
    ops.uniaxialMaterial('Elastic', i, EY[i-1]*1e3) # Stiffness must be multiplied by 10**3 since the unit is N here.
    ops.uniaxialMaterial('Elastic', 100+i, EX[0]*1e3) # d
for i in range(1,Nnode):
    ops.element('twoNodeLink', i, i, i+1, '-mat', i,100+i,100+i, '-dir', 1,2,0, '-doRayleigh','yes') # Each Dir must have individual Mat / Rayleigh Included / RZ somwhow makes an error. (need to be 0)

cprint("Stage 1 : Model Builder Completed",'blue')
cprint("-"*50, 'blue')
#------------------------ Model Building completed ---------------------------#

#------------------------ Model Eigenvalue Analysis Started ------------------#
cprint("Stage 2 : Eigenvalue Analysis Initiated",'blue')
Neigen=5
eigen = ops.eigen(Neigen)
for i in range(0,Neigen):
 naf = math.sqrt(eigen[i]) / (2*math.pi) # eigenvalue = 2 pi f
 print(str(i+1) + 'th Mode Frequency : ' + str(round(naf,5)) + '(Hz) & ' + 'Period : ' + str(round(1/naf,5)) + '(s)')
cprint("Stage 2 : Eigenvalue Analysis Completed",'blue')
cprint("-"*50, 'blue')
#------------------------ Model Eigenvalue Analysis Completed ----------------#

#------------------------ Gravity Analysis Initiated  ----------------------#
cprint("Stage 3 : Gravity Analysis Initiated",'blue')
# Define Pattern for Gravity Analysis
g = 9800. #mm/s2
ops.timeSeries('Linear', 1)
ops.pattern('Plain', 1, 1)
for i in range(1,Nnode+1):
    ops.load(i, 0., -FloorMass[i-1]*g, 0.) # X Y RZ

# Define Analysis for Gravity Analysis
tolerance = 1e-5
ops.wipeAnalysis()
ops.system('BandGeneral')
ops.constraints('Plain')
ops.algorithm('Linear')
ops.numberer('RCM')
ops.test('NormUnbalance', tolerance, 10)
ops.integrator('LoadControl', 0.1)
ops.analysis('Static')
ops.analyze(10)
ops.loadConst('-time', 0.)
cprint("Stage 3 : Gravity has been Adopted", 'blue')
cprint("-"*50, 'blue')
#------------------------ Gravity Analysis Completed  ----------------------#

#------------------------ EQ Analysis Initiated  ---------------------------#
cprint("Stage 4 : Earthquake Analysis Initiated",'blue')
# Define Pattern
dt = 0.01
gmcsv = np.loadtxt('motionMDF.csv') # Unit = mm/s2 (MAX 3490 MIN -3960)
gmlist = gmcsv.tolist()
ops.timeSeries('Series', 2, '-dt', dt, '-values',*gmlist)
ops.pattern('UniformExcitation', 2, 1, '-accel', 2) # Relative Excitation

# Define Rayleigh Damping
h = 0.05
alpha = (2*math.sqrt(eigen[0])*math.sqrt(eigen[1])*(h*math.sqrt(eigen[1])-h*math.sqrt(eigen[0]))) / (eigen[1] - eigen[0])
beta =  (2*(h*math.sqrt(eigen[1])-h*math.sqrt(eigen[0]))) / (eigen[1] - eigen[0])
ops.rayleigh(alpha,beta,0.,0.)

# Define Analysis
ops.wipeAnalysis()
ops.system('BandGeneral')
ops.constraints('Transformation')
ops.algorithm('Newton')
ops.numberer('RCM')
ops.integrator('Newmark', 0.5, 0.25)
ops. analysis('Transient')

dtA = 1e-2
#Nstep = int(gmcsv.size*(1/dtA))
Nstep = int(gmcsv.size)
ResultDOF = 1
Result_Disp = np.zeros((Nstep, Nnode+1)) # Create an empty ARRAY Filled with '0' # Row = 1 + iteration , Column = Timerow + Nnode
Result_Accel = np.zeros((Nstep, Nnode+1))
Result_Force = np.zeros((Nstep, Nnode+1))
print("Empty Arrays have been Created for accumulating RESULTS")
for i in range(1,Nstep):
    ops.analyze(1, dtA) # TimeStep = 1/10,000 sec
    Result_Accel[i,0] = ops.getTime()
    Result_Disp[i,0] = ops.getTime()
    Result_Force[i, 0] = ops.getTime()
    print(i , ' th Iteration Completed')

    for j in range(1, Nnode+1):
        Result_Accel[i,j] = ops.nodeAccel(j, ResultDOF)
        Result_Disp[i,j] = ops.nodeDisp(j, ResultDOF)
        Result_Force[i,j] = ops.eleForce(j, ResultDOF)

# Execute Analysis
cprint("Stage 5 : Earthquake Analysis Completed",'blue')
cprint("-"*50, 'blue')
#------------------------ EQ Analysis Terminated ---------------------------#

#------------------------ DATA Analsis Starts  -----------------------------#
font = {'family': 'Times New Roman',
        'size'   :10}
plt.rc('font', **font)

cprint("Stage 6 : Data Analysis Initiated",'blue')
Dnode = 10
Dele = 9
ax1 = plt.subplot(311) # num of Graph, col, row
plt.plot(Result_Disp[:,0], Result_Disp[:,Dnode],'k')  #:, means from the beginning to the end of the row
plt.setp(ax1.get_xticklabels(), visible=False)
plt.ylabel(str(Dnode)+' Node DISP [mm]')
plt.grid(True)
plt.legend()
plt.tight_layout()

ax2 = plt.subplot(312)
plt.plot(Result_Accel[:,0], Result_Accel[:,10],'k')
plt.setp(ax2.get_xticklabels(), visible=False)
plt.grid(True)
plt.ylabel(str(Dnode)+' Node ACC [mm/s2]')
plt.legend()
plt.tight_layout()

ax3 = plt.subplot(313) # num of Graph, col, row
plt.plot(Result_Force[:,0], Result_Force[:,Dele]/1e3,'k')
plt.ylabel(str(Dele)+' Ele-Force [kN]')
plt.grid(True)
plt.legend()
plt.tight_layout()

np.savetxt(str(Dnode) + "Node " + str(ResultDOF)+ "DOF" + "DISP.csv",Result_Disp)
np.savetxt(str(Dnode) + "Node " + str(ResultDOF)+ "DOF" + "ACC.csv",Result_Accel)

cprint("Stage 6 : Data Analysis Completed",'blue')
cprint("-"*50, 'blue')
#------------------------ DATA Analsis Ends  -------------------------------#

end_time = timeit.default_timer() - start_time
cprint('OpenSEES Analysis Terminated, Elasped Time is :' + str(round(end_time,5)) +' (s)','red') #문자는 str로 집어넣어야 한다.
plt.show()



